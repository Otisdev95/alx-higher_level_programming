Test cases for 0-add_integer module
===================================

The 0-add_integer module takes two integers or floats as arguments and returns their sum

Usage
=====

Import function from the module:
	>>> add_integer(2, 2)
	4

Add one positive and one negative integer (a = 8 and b = -6)
	>>> add_integer(8, -6)
	2

Add two negative integers (a = -15 and b = -15)
	>>> add_integer(-15, -15)
	-30

Add two integers with the second being the same as he default value of b (a = 102 and b = 98)
	>>> add_integer(102)
	200

Add a float and an integer where the integer is equal to the default value of b (a = 50.5 and b = 98)
	>>> add_integer(50.5)
	148

Add a positive float and a positive integer (a = 50.5 and b = 50)
	>>> add_integer(50.5, 50)
	100

Add a positive float and a negative integer (a = 100.5 and b = -50)
	>>> add_integer(100.5, -50)
	50

Add two positive floats (a = 100.5 and b = 50.5)
	>>> add_integer(100.5, 50.5)
	150

Add two negative floats (a = -100.5 and b = -50.5)
	>>> add_integer(-100.5, -50.5)
	-150

Add a letter and a number (a = 'f' and b = 3)
	>>> add_integer('f', 3)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Add two letters (a = 'f' and b = 'g')
	>>> add_integer('f', 'g')
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Add an integer and a string (a = 10 and b = "boy")
	>>> add_integer(10, "boy")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

Pass no argument to the function
	>>> add_integer(None)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Add a tuple
	>>> add_integer((1, 1))
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Add a number and a list
	>>> add_integer(5, [])
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

Pass only a string
	>>> add_integer("Hello_world")
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Case Overflow 1:
	
	>>> add_integer(float('inf'), 0)
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer

Case Overflow 2:

	>>> add_integer(float('inf'), float('-inf'))
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer

Case NaN 1:

	>>> add_integer(0, float('nan'))
	Traceback (most recent call last):
		...
	ValueError: cannot convert float NaN to integer

Case NaN 2:
	
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
		...
	ValueError: cannot convert float NaN to integer
